% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vl_isochrone.R
\name{vl_isochrone}
\alias{vl_isochrone}
\title{Get Isochrones from a Point}
\usage{
vl_isochrone(
  loc,
  times,
  distances,
  costing = "auto",
  costing_options = list(),
  val_server = "https://valhalla1.openstreetmap.de/"
)
}
\arguments{
\item{loc}{one point from which to compute isochrones.
\code{loc} can be: \itemize{
  \item a vector of coordinates (longitude and latitude, WGS 84),
  \item a data.frame of longitudes and latitudes (WGS 84),
  \item a matrix of longitudes and latitudes (WGS 84),
  \item an sfc object of type POINT,
  \item an sf object of type POINT.
}}

\item{times}{a vector of travel times (in minutes) to compute the
isochrones.}

\item{distances}{a vector of travel distances (in meters) to compute the
isochrones.}

\item{costing}{the costing model to use for the route. Default is
"auto".\cr}

\item{costing_options}{a list of options to use with the costing model
(see \url{https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference/#costing-options}}

\item{val_server}{the URL of the Valhalla server. Default is the demo server
(https://valhalla1.openstreetmap.de/).}
}
\value{
An sf MULTIPOLYGON object is returned with the following fields:
'metric' (the metric used, either 'time' or 'distance')
and 'contour' (the value of the metric).
}
\description{
Build and send a Valhalla API query to get isochrones from a point.
Note that you must provide either 'times' or 'distances' to compute the isochrones
at given times or distances from the center point.
}
\examples{
\dontrun{
# Inputs are data frames
apotheke.df <- read.csv(system.file("csv/apotheke.csv", package = "valh"))

# Extract the first point and compute isochrones at 3, 6, 9 and 12 kilometers,
# using the "auto" costing model
pt1 <- apotheke.df[1, c("lon", "lat")]
iso1 <- vl_isochrone(loc = pt1, distances = c(3, 6, 9, 12), costing = "auto")

# Inputs are sf points
library(sf)
apotheke.sf <- st_read(system.file("gpkg/apotheke.gpkg", package = "valh"),
  quiet = TRUE
)
# Extract the first point and compute isochrones at 15, 30, 45 and 60 minutes
# using the "bicycle" costing model
pt2 <- apotheke.sf[1, ]
iso2 <- vl_isochrone(loc = pt2, times = c(15, 30, 45, 60), costing = "bicycle")
}
}
